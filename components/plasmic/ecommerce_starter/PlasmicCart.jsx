// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rvL4Z2jyAqe3umzZYo5sfv
// Component: -RlO4TDOtAWF
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: -zE89ucLXzyA/component
import CartItem from "../../CartItem"; // plasmic-import: qjR6ivWTouhM/component
import Button from "../../Button"; // plasmic-import: 98uZdJHb8ovP/component
import Separator from "../../Separator"; // plasmic-import: jr7ZL1lPW1Rq/component
import Footer from "../../Footer"; // plasmic-import: QMRL2OPgGfRX/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: _KXZ2ScVpJRX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: rvL4Z2jyAqe3umzZYo5sfv/projectcss
import * as sty from "./PlasmicCart.module.css"; // plasmic-import: -RlO4TDOtAWF/css
import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: tp9ksO-zKj7Q/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: 16weDBp5bIK5/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: wk4HP9MKkgZl/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: PIiokDHdfeaA/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: GtlGcf4PbO_T/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: sD_a7Zz1NElJ/icon

export const PlasmicCart__VariantProps = new Array("filled");

export const PlasmicCart__ArgProps = new Array(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5"
);

function PlasmicCart__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"Shopping Cart"}</title>
        <meta key="og:title" property="og:title" content={"Shopping Cart"} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={
            "Congue pulvinar scelerisque vestibulum senectus ullamcorper ac sem justo odio adipiscing volutpat nam a amet quam facilisi parturient parturient et id parturient per."
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            { [sty.root__filled]: hasVariant(variants, "filled", "filled") }
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar, {
              [sty.navBar__filled]: hasVariant(variants, "filled", "filled")
            })}
            filled={
              hasVariant(variants, "filled", "filled") ? "filled" : undefined
            }
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(defaultcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"container2"}
              data-plasmic-override={overrides.container2}
              hasGap={true}
              className={classNames(defaultcss.all, sty.container2, {
                [sty.container2__filled]: hasVariant(
                  variants,
                  "filled",
                  "filled"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__qckXl, {
                  [sty.freeBox__filled__qckXl3WsU6]: hasVariant(
                    variants,
                    "filled",
                    "filled"
                  )
                })}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__oIJn3,
                    {
                      [sty.freeBox__filled__oIJn33WsU6]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "filled", "filled")
                    ? "Your bag (1)"
                    : "Looks like your bag is empty"}
                </div>

                {(hasVariant(variants, "filled", "filled") ? true : false) ? (
                  <CartItem
                    data-plasmic-name={"cartItem"}
                    data-plasmic-override={overrides.cartItem}
                    className={classNames("__wab_instance", sty.cartItem, {
                      [sty.cartItem__filled]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    })}
                  >
                    <p.PlasmicLink
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.link
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Eternity NITRO Men's Running Shoes"}
                    </p.PlasmicLink>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__ip7I
                      )}
                    >
                      {"#00000"}
                    </div>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__phMv0
                      )}
                    >
                      {"Size: 11"}
                    </div>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__g5Qxf
                      )}
                    >
                      {"Quantity: 1"}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__ecRmL)}
                    >
                      <Icon31Icon
                        className={classNames(defaultcss.all, sty.svg___0NmdW)}
                        role={"img"}
                      />

                      <Icon32Icon
                        className={classNames(defaultcss.all, sty.svg__dwsAc)}
                        role={"img"}
                      />
                    </p.Stack>
                  </CartItem>
                ) : null}

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__zBr,
                    {
                      [sty.freeBox__filled__zBr3WsU6]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    }
                  )}
                >
                  {
                    "If you have an account, please sign in to see items you previously added."
                  }
                </div>

                <Button
                  colors={"black"}
                  icons={"none"}
                  rounded={"rounded"}
                  size={"large"}
                  slot={"Login"}
                />

                <Button
                  colors={"white"}
                  icons={"none"}
                  rounded={"rounded"}
                  slot={"Continue shopping"}
                />

                {(hasVariant(variants, "filled", "filled") ? false : false) ? (
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__g6G3F, {
                      [sty.freeBox__filled__g6G3F3WsU6]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    })}
                  />
                ) : null}
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___5S7Tx, {
                  [sty.freeBox__filled___5S7Tx3WsU6]: hasVariant(
                    variants,
                    "filled",
                    "filled"
                  )
                })}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__zn8D, {
                    [sty.freeBox__filled__zn8D3WsU6]: hasVariant(
                      variants,
                      "filled",
                      "filled"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__wuHvi,
                      {
                        [sty.freeBox__filled__wuHvi3WsU6]: hasVariant(
                          variants,
                          "filled",
                          "filled"
                        )
                      }
                    )}
                  >
                    {"Order Summary"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__wyiYr, {
                      [sty.freeBox__filled__wyiYr3WsU6]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    })}
                  >
                    <div
                      className={classNames(defaultcss.all, sty.freeBox__ks3LI)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__deBpE,
                          {
                            [sty.freeBox__filled__deBpE3WsU6]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "Subtotal (1)"
                            : "Subtotal (0)",
                          value: args.slot5,
                          className: classNames(sty.slotSlot5, {
                            [sty.slotSlot5__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>

                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__wK0O,
                          {
                            [sty.freeBox__filled__wK0O3WsU6]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "$88.99"
                            : "$0.00",
                          value: args.children,
                          className: classNames(sty.slotChildren, {
                            [sty.slotChildren__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    <div
                      className={classNames(defaultcss.all, sty.freeBox__tTalf)}
                    >
                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__fIfwq,
                            {
                              [sty.freeBox__filled__fIfwq3WsU6]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Estimated Shipping (free over $49)"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__zv4Ru,
                          {
                            [sty.freeBox__filled__zv4Ru3WsU6]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "FREE"
                            : "-",
                          value: args.slot,
                          className: classNames(sty.slotSlot, {
                            [sty.slotSlot__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    <div
                      className={classNames(defaultcss.all, sty.freeBox__mhgCz)}
                    >
                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__vuhHh,
                            {
                              [sty.freeBox__filled__vuhHh3WsU6]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Estimated Tax"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__zapyz,
                          {
                            [sty.freeBox__filled__zapyz3WsU6]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "-",
                          value: args.slot2,
                          className: classNames(sty.slotSlot2, {
                            [sty.slotSlot2__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__bcK4Z,
                        {
                          [sty.button__filled__bcK4Z3WsU6]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        }
                      )}
                      icons={"none"}
                      link={"link"}
                      slot={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__ux9Z7
                          )}
                        >
                          {"Have a promo code?"}
                        </div>
                      }
                    />

                    <Separator
                      data-plasmic-name={"separator"}
                      data-plasmic-override={overrides.separator}
                      className={classNames("__wab_instance", sty.separator)}
                      dark={"dark"}
                    />

                    <div
                      className={classNames(
                        defaultcss.all,
                        sty.freeBox__lzEtz,
                        {
                          [sty.freeBox__filled__lzEtz3WsU6]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox___6Ppeg,
                            {
                              [sty.freeBox__filled___6Ppeg3WsU6]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Estimated Total"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__mbyks,
                          {
                            [sty.freeBox__filled__mbyks3WsU6]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "$88.99"
                            : "$0.00",
                          value: args.slot4,
                          className: classNames(sty.slotSlot4, {
                            [sty.slotSlot4__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    {(hasVariant(variants, "filled", "filled") ? true : false)
                      ? p.renderPlasmicSlot({
                          defaultContents: true ? (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__uzgIl
                              )}
                              colors={"blue"}
                              icons={"none"}
                              rounded={"rounded"}
                              size={"large"}
                              slot={
                                <div
                                  className={classNames(
                                    defaultcss.all,
                                    defaultcss.__wab_text,
                                    sty.freeBox__ntd6Z
                                  )}
                                >
                                  {"Checkout"}
                                </div>
                              }
                            />
                          ) : null,
                          value: args.slot3
                        })
                      : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.freeBox__ssO5O,
                        {
                          [sty.freeBox__filled__ssO5O3WsU6]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        }
                      )}
                    >
                      <Icon30Icon
                        className={classNames(defaultcss.all, sty.svg__ibMb0)}
                        role={"img"}
                      />

                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__qNdQm,
                            {
                              [sty.freeBox__filled__qNdQm3WsU6]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Secure"}
                        </div>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__kke, {
                    [sty.freeBox__filled__kke3WsU6]: hasVariant(
                      variants,
                      "filled",
                      "filled"
                    )
                  })}
                >
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__kyFhA)}
                    role={"img"}
                    src={"/plasmic/ecommerce_starter/images/image.svg"}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__ltkcN)}
                    role={"img"}
                    src={"/plasmic/ecommerce_starter/images/image2.svg"}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__vRdFl)}
                    role={"img"}
                    src={"/plasmic/ecommerce_starter/images/image3.svg"}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img___2HyBm)}
                    role={"img"}
                    src={"/plasmic/ecommerce_starter/images/image4.svg"}
                  />
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(defaultcss.all, sty.container, {
                [sty.container__filled]: hasVariant(
                  variants,
                  "filled",
                  "filled"
                )
              })}
            >
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__y3SLj)}
                role={"img"}
                src={
                  "https://www.patagonia.com/on/demandware.static/-/Library-Sites-PatagoniaShared/default/dw4b201dc8/images/for-the-planet.png"
                }
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___5UNhd)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__bYtp3
                  )}
                >
                  {"1% of your purchase will go to a grassroot organization."}
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button__jlutu)}
                  icons={"none"}
                  link={"link"}
                  slot={"Learn more"}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
            container432={
              <React.Fragment>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__jfaSv)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__sPh1G
                    )}
                  >
                    {"Subscribe"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__ldygd
                    )}
                  >
                    {
                      "Sign up for exclusive offers, original stories, activism, events and more."
                    }
                  </div>

                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox)}
                    placeholder={"Email address…"}
                    size={1}
                    type={"text"}
                    value={""}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__eE1EI)}
                    colors={"black"}
                    icons={"none"}
                    slot={"Sign me up"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__jTcmy)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__gRSrv
                    )}
                  >
                    {"Help"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__dpqfC)}
                  >
                    <Button slot={"Order status"}>
                      <Icon22Icon
                        className={classNames(defaultcss.all, sty.svg__kuChR)}
                        role={"img"}
                      />
                    </Button>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__x86Tx
                      )}
                      slot={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox___1HBnu
                          )}
                        >
                          {"Returns and exchanges"}
                        </div>
                      }
                    >
                      <Icon21Icon
                        className={classNames(defaultcss.all, sty.svg__nTr9J)}
                        role={"img"}
                      />
                    </Button>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___0R9Zu
                      )}
                      slot={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__aEvg
                          )}
                        >
                          {"Help center"}
                        </div>
                      }
                    >
                      <Icon20Icon
                        className={classNames(defaultcss.all, sty.svg___2XYt1)}
                        role={"img"}
                      />
                    </Button>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__diBZn)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__v3USl
                    )}
                  >
                    {"More info"}
                  </div>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__jxDw6)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.freeBox___1GVRn
                      )}
                    >
                      <Button icons={"none"} slot={"Gift cards"} />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__hzAxU
                        )}
                        icons={"none"}
                        slot={"Find a store"}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__xiEby
                        )}
                        icons={"none"}
                        slot={"Careers"}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__pSe
                        )}
                        icons={"none"}
                        slot={"Sitemap"}
                      />
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__osGv)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__kuy34
                        )}
                        icons={"none"}
                        slot={"Group sales"}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__nxLFo
                        )}
                        icons={"none"}
                        slot={"Privacy policy"}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__aEi8I
                        )}
                        icons={"none"}
                        slot={"Contact us"}
                      />
                    </p.Stack>
                  </div>
                </p.Stack>
              </React.Fragment>
            }
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "section",
    "container2",
    "cartItem",
    "link",
    "separator",
    "container",
    "footer",
    "textbox"
  ],

  navBar: ["navBar"],
  section: [
    "section",
    "container2",
    "cartItem",
    "link",
    "separator",
    "container"
  ],

  container2: ["container2", "cartItem", "link", "separator"],
  cartItem: ["cartItem", "link"],
  link: ["link"],
  separator: ["separator"],
  container: ["container"],
  footer: ["footer", "textbox"],
  textbox: ["textbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCart__ArgProps,
      internalVariantPropNames: PlasmicCart__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCart__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCart";
  } else {
    func.displayName = `PlasmicCart.${nodeName}`;
  }
  return func;
}

export const PlasmicCart = Object.assign(
  // Top-level PlasmicCart renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    section: makeNodeComponent("section"),
    container2: makeNodeComponent("container2"),
    cartItem: makeNodeComponent("cartItem"),
    link: makeNodeComponent("link"),
    separator: makeNodeComponent("separator"),
    container: makeNodeComponent("container"),
    footer: makeNodeComponent("footer"),
    textbox: makeNodeComponent("textbox"),
    // Metadata about props expected for PlasmicCart
    internalVariantProps: PlasmicCart__VariantProps,
    internalArgProps: PlasmicCart__ArgProps
  }
);

export default PlasmicCart;
/* prettier-ignore-end */
