// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rvL4Z2jyAqe3umzZYo5sfv
// Component: 5PzJ3BEZk7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 98uZdJHb8ovP/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: rvL4Z2jyAqe3umzZYo5sfv/projectcss
import * as sty from "./PlasmicSelectionForKits.module.css"; // plasmic-import: 5PzJ3BEZk7/css
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: jhfGv_-XMeYa/icon

export const PlasmicSelectionForKits__VariantProps = new Array();

export const PlasmicSelectionForKits__ArgProps = new Array();

function PlasmicSelectionForKits__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return true ? (
    <p.Stack
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        colors={"lightGrayOutline"}
        link2={"/category"}
        slot={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___73YmS
            )}
          >
            {"Shop All Kits"}
          </div>
        }
      >
        <Icon4Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />
      </Button>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.freeBox__dpTof
        )}
      >
        {"One Shot Kits | Drum Kits | Preset Banks | Loop Kits"}
      </div>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "button", "svg"],
  button: ["button", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectionForKits__ArgProps,
      internalVariantPropNames: PlasmicSelectionForKits__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSelectionForKits__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectionForKits";
  } else {
    func.displayName = `PlasmicSelectionForKits.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectionForKits = Object.assign(
  // Top-level PlasmicSelectionForKits renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicSelectionForKits
    internalVariantProps: PlasmicSelectionForKits__VariantProps,
    internalArgProps: PlasmicSelectionForKits__ArgProps
  }
);

export default PlasmicSelectionForKits;
/* prettier-ignore-end */
