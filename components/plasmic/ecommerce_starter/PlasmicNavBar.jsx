// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rvL4Z2jyAqe3umzZYo5sfv
// Component: -zE89ucLXzyA
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 98uZdJHb8ovP/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: _KXZ2ScVpJRX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: rvL4Z2jyAqe3umzZYo5sfv/projectcss
import * as sty from "./PlasmicNavBar.module.css"; // plasmic-import: -zE89ucLXzyA/css
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: QUMk0cqmXwtU/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: AXvh3mGLfpi5/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: -z8kpSSC31eU/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: jhfGv_-XMeYa/icon

export const PlasmicNavBar__VariantProps = new Array("filled", "searchOpen");

export const PlasmicNavBar__ArgProps = new Array();

function PlasmicNavBar__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__searchOpen]: hasVariant(variants, "searchOpen", "searchOpen")
      })}
    >
      <div
        data-plasmic-name={"container2"}
        data-plasmic-override={overrides.container2}
        className={classNames(defaultcss.all, sty.container2, {
          [sty.container2__filled]: hasVariant(variants, "filled", "filled")
        })}
      >
        <Button
          link2={"/Home"}
          slot={
            (
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__lWqc
                )}
              >
                {"Home"}
              </div>
            ) : null
          }
        >
          <Icon24Icon
            className={classNames(defaultcss.all, sty.svg__fjDZr)}
            role={"img"}
          />
        </Button>

        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(defaultcss.all, sty.freeBox___6CiB)} />
        ) : null}

        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(defaultcss.img, sty.img, {
            [sty.img__filled]: hasVariant(variants, "filled", "filled"),
            [sty.img__searchOpen]: hasVariant(
              variants,
              "searchOpen",
              "searchOpen"
            )
          })}
          role={"img"}
          src={"/plasmic/ecommerce_starter/images/theSauceVaultLogOpng.png"}
        />

        {(hasVariant(variants, "filled", "filled") ? true : false) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__rax9W, {
              [sty.freeBox__filled__rax9Wcs7Di]: hasVariant(
                variants,
                "filled",
                "filled"
              )
            })}
          />
        ) : null}

        <div
          data-plasmic-name={"spacerForLogo1"}
          data-plasmic-override={overrides.spacerForLogo1}
          className={classNames(defaultcss.all, sty.spacerForLogo1)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__tjHkd
            )}
          >
            {"1px"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__oiG2Z, {
            [sty.freeBox__filled__oiG2Zcs7Di]: hasVariant(
              variants,
              "filled",
              "filled"
            ),

            [sty.freeBox__searchOpen__oiG2ZatAza]: hasVariant(
              variants,
              "searchOpen",
              "searchOpen"
            )
          })}
        >
          {(hasVariant(variants, "searchOpen", "searchOpen") ? false : true) ? (
            <Button
              className={classNames("__wab_instance", {
                [sty.button__searchOpen__nSeJatAza]: hasVariant(
                  variants,
                  "searchOpen",
                  "searchOpen"
                )
              })}
              icons={
                hasVariant(variants, "searchOpen", "searchOpen")
                  ? undefined
                  : "only"
              }
              link2={"/category"}
              slot={"Menu"}
            >
              <Icon2Icon
                className={classNames(defaultcss.all, sty.svg__xernk)}
                role={"img"}
              />
            </Button>
          ) : null}
          {(hasVariant(variants, "searchOpen", "searchOpen") ? true : false) ? (
            <input
              data-plasmic-name={"textbox"}
              data-plasmic-override={overrides.textbox}
              className={classNames(defaultcss.input, sty.textbox, {
                [sty.textbox__searchOpen]: hasVariant(
                  variants,
                  "searchOpen",
                  "searchOpen"
                )
              })}
              placeholder={
                hasVariant(variants, "searchOpen", "searchOpen")
                  ? "Searchâ€¦"
                  : "Some placeholder"
              }
              size={1}
              type={"text"}
              value={
                hasVariant(variants, "searchOpen", "searchOpen")
                  ? ""
                  : "Some value"
              }
            />
          ) : null}

          <Button icons={"only"} slot={"Menu"}>
            <Icon3Icon
              className={classNames(defaultcss.all, sty.svg__x0Tlp)}
              role={"img"}
            />
          </Button>

          <div className={classNames(defaultcss.all, sty.freeBox__x53HH)}>
            <Button
              colors={"white"}
              rounded={"rounded"}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__zj1Mz,
                    {
                      [sty.freeBox__filled__zj1MZcs7Di]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "filled", "filled") ? "1" : "0"}
                </div>
              }
            >
              <Icon4Icon
                className={classNames(defaultcss.all, sty.svg__uloaA)}
                role={"img"}
              />
            </Button>
          </div>
        </p.Stack>
      </div>
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "container2", "img", "spacerForLogo1", "textbox"],
  container2: ["container2", "img", "spacerForLogo1", "textbox"],
  img: ["img"],
  spacerForLogo1: ["spacerForLogo1"],
  textbox: ["textbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBar__ArgProps,
      internalVariantPropNames: PlasmicNavBar__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container2: makeNodeComponent("container2"),
    img: makeNodeComponent("img"),
    spacerForLogo1: makeNodeComponent("spacerForLogo1"),
    textbox: makeNodeComponent("textbox"),
    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
