// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rvL4Z2jyAqe3umzZYo5sfv
// Component: CUCpwfWcus3T
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Price from "../../Price"; // plasmic-import: jZZPF5im_0Lf/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: rvL4Z2jyAqe3umzZYo5sfv/projectcss
import * as sty from "./PlasmicProductCard.module.css"; // plasmic-import: CUCpwfWcus3T/css

export const PlasmicProductCard__VariantProps = new Array("small");

export const PlasmicProductCard__ArgProps = new Array(
  "image",
  "children",
  "link",
  "price2"
);

function PlasmicProductCard__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__small]: hasVariant(variants, "small", "small")
      })}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(defaultcss.all, sty.link, {
          [sty.link__small]: hasVariant(variants, "small", "small")
        })}
        component={Link}
        href={args.link !== undefined ? args.link : "/item"}
        platform={"nextjs"}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__c4KWx)}
              role={"img"}
              src={
                "https://assets.adidas.com/images/h_840,f_auto,q_auto:sensitive,fl_lossy/1070aebbb55841e1aae5ac9f00b39879_9366/adidas_Ultraboost_DNA_x_LEGO(r)_Plates_Shoes_White_FY7690_01_standard.jpg"
              }
            />
          ),

          value: args.image
        })}

        {(
          hasVariant(variants, "small", "small") && triggers.hover_root
            ? true
            : false
        ) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__gsXjv, {
              [sty.freeBox__small__gsXjvk9Dj1]: hasVariant(
                variants,
                "small",
                "small"
              )
            })}
          />
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__swfHa, {
            [sty.freeBox__small__swfHak9Dj1]: hasVariant(
              variants,
              "small",
              "small"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__fCj0)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__jg2YB
                  )}
                >
                  {" if you can dream it you can build it"}
                </div>
              ),

              value: args.children
            })}
          </p.Stack>
        </p.Stack>
      </p.PlasmicLink>

      <div className={classNames(defaultcss.all, sty.freeBox___76Sal)} />

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.freeBox__tzqyj
        )}
      >
        {"Drippy (One shot Kit)"}
      </div>

      <Price
        data-plasmic-name={"price"}
        data-plasmic-override={overrides.price}
        className={classNames("__wab_instance", sty.price)}
        price={p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__uiBkO
                )}
              >
                {"$20.00"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__dsd9H
                )}
              >
                {" $00.00"}
              </div>
            </React.Fragment>
          ),

          value: args.price2
        })}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "price"],
  link: ["link"],
  price: ["price"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductCard__ArgProps,
      internalVariantPropNames: PlasmicProductCard__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    price: makeNodeComponent("price"),
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
